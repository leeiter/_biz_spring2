<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.2.xsd">
		
	<!-- spring security project의 핵심 context 파일 -->
	<!-- 여기에 security 설정과 관련된 내용들 작성 -->
	
	<!-- 암호화 설정을 사용하기 위한 bean 설정 -->
	<!-- controller, service가 아닌 최초 인증 과정에서 사용할 bean -->
	
	<!--
		생성자에 암호화 반복 횟수를 설정
		기본값은 4 이므로 4 일 경우는 생략해도 된다.
		편의상 4 일 경우도 값을 설정해주자.
		
		이 횟수가 크면 클수록 암호화 정도가 깊어지는데
		너무 크면 프로젝트 실행시간이 과도하게 길어지는 현상이 발생
	-->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg index="0" value="4"></constructor-arg>
	</bean>
	
	<!-- login을 수행할 때 user DB로부터 사용자 정보 가져오기 설정 -->
	<bean id="secureDao" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<property name="dataSource" ref="authDB" />
		<property name="usersByUsernameQuery">
			<value>
				SELECT username, password, enabled
				FROM users WHERE username=?
			</value>
		</property>
		<property name="authoritiesByUsernameQuery">
			<value>
				SELECT username, authority
				FROM authorities
				WHERE username=?
			</value>
		</property>

	</bean>

		<!-- 사용자 login을 검증 -->
		<security:authentication-manager>
			<security:authentication-provider user-service-ref="secureDao">
				<security:password-encoder ref="passwordEncoder"/>
			</security:authentication-provider>
		</security:authentication-manager>
		
		<!-- 사용자 인증을 할 떄 우리가 만든 login form과 연동하기 위한 설정
		
		POST 방식으로 서버에 데이터를 전송할 때
		반드시 서버가 제공한 인증관련 token을 포함해라 라는 설정
		false 는 위험하다.
		<security:csrf disabled="false"/>
		
		logout 기능ㅇ르 별도로 만들지 않고
		spring security가 제공하는 logout 기능ㅇ르 사용하겠다.
		임의로 logout 기능을 만들려면 logout-url 에 설정을 바꾸면 된다.
		<security:logout
			logout-url="/logout" />
		
		 -->
	<security:http>
		<security:csrf disabled="false"/>
		<security:form-login
			login-page=""
			login-processing-url=""
			default-target-url=""
			username-parameter=""
			password-parameter=""
		/>
		
		<security:logout
			logout-url="/logout"
			invalidate-session="true"
			logout-success-url=""
		/>
	</security:http>

</beans>
